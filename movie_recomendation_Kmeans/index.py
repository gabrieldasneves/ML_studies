# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PmhcQWHoVa3Nz_fzt8krwuDCntRU1QsQ

Movie recommendation system.
The dataset is composed by ID,movie and genres
"""

import pandas as pd
uri_movies = "https://raw.githubusercontent.com/alura-cursos/machine-learning-algoritmos-nao-supervisionados/master/movies.csv"
movies = pd.read_csv(uri_movies)
movies.head()

genre  = movies.genres.str.get_dummies()

moviesData = pd.concat([movies,genre], axis = 1)
moviesData.head()

from sklearn.preprocessing import StandardScaler
# escalando os dados p saber quais generos sãão mais importantes para classificar

scaler = StandardScaler()
scalledGenres = scaler.fit_transform(genre)
scalledGenres

"""Criando um modelo para  o agrupamento (clusterização)"""

from sklearn.cluster import KMeans
modelo = KMeans(n_clusters = 3)

modelo.fit(scalledGenres)

print('Grupos: {}' .format(modelo.labels_))

print(modelo.cluster_centers_)

"""visualizando melhor a pontuação dada pela clusterização:"""

groups = pd.DataFrame(modelo.cluster_centers_,
             columns=genre.columns)
groups

groups.transpose().plot.bar(subplots =True,figsize=(25,25), sharex=False)

"""Filtro para fazer a recomendação:"""

Grupo = 0
filtro = modelo.labels_ == Grupo
moviesData[filtro].sample(7)

"""Plotando o grááfico. O problema éé que temos 20 dimensões (colunas). Então vamos reduzir para vizualizar (vamos usar o TSNE, que éé muito util para visualização de dados)"""

from sklearn.manifold import TSNE

tsne = TSNE()
visual =  tsne.fit_transform(scalledGenres)
visual

import seaborn as sns 

# sóó aumentando o tamanho do plot
sns.set(rc={'figure.figsize': (12,12)})

sns.scatterplot(x = visual[:,0],
                y = visual[:,1], hue=modelo.labels_,
                palette= sns.color_palette("Set1", 3))

"""No caso.... como reduzimos a dimensionalidade, perdemos informaçõões, entãão o grááfico ficou dessa forma, um pouco confuso e tudo bagunçado"""