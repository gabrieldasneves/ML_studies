# -*- coding: utf-8 -*-
"""index.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ciu0VQsEurHbKtrzJOxZbbph6LXCOoiz
"""

!pip install graphviz==0.10  
!apt-get install graphviz

import pandas as pd
import numpy as np
# importando os dados 
dados = pd.read_csv("https://gist.githubusercontent.com/guilhermesilveira/4d1d4a16ccbf6ea4e0a64a38a24ec884/raw/afd05cb0c796d18f3f5a6537053ded308ba94bf7/car-prices.csv")
print(dados.head()) # print das primeiras inhas dos dados

# renomeando algumas colunas
a_renomear = {
    "mileage_per_year" : "milhas_por_ano",
    "model_year" : "ano_do_modelo",
    "price" : "preco",
    "sold" : "vendido"
}
dados = dados.rename(columns = a_renomear)


#como estamos trabalhando com classificaçãão binaria, vamos mudar o yes e no da ultima coluna para 0 ou 1

a_trocar = {
    "no" :0,
    "yes" :1
}

dados.vendido = dados.vendido.map(a_trocar)
dados.head()



#no ano do modelo tem uma diferenca muito pequena entre os anos então vamos usar a coluna idade do carro

from datetime import datetime

dados['idade_do_modelo'] = datetime.today().year - dados.ano_do_modelo 
dados.head()

# vamos mudar a unidade para km/ano ao invéés de milha/ano
dados['km_por_ano'] = dados.milhas_por_ano*(1.60934)
dados.head()

#drop das colunas que n sao necessarias
dados = dados.drop(columns = ["Unnamed: 0", "milhas_por_ano", "ano_do_modelo"], axis=1)
dados.head()

#classificando linearmente
x = dados[["preco","idade_do_modelo","km_por_ano"]]
y = dados["vendido"]

from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

SEED = 5
np.random.seed(SEED)
treinox, testex, treinoy, testey = train_test_split(x,y,test_size = 0.25, stratify = y)

#escalando os dados... criando um intervalo onde eles se encontram
#ou seja, tira a media e divide pelo desvio padrão
scaler = StandardScaler()
scaler.fit(treinox)
treinox_escalado = scaler.transform(treinox)
testex_escalado = scaler.transform(testex )


#gerando o modelo
modelo = LinearSVC()
modelo.fit(treinox_escalado,treinoy)
previsoes = modelo.predict(testex_escalado)

acuracia = accuracy_score(testey,previsoes)
print("acuracia usando LinearSVC: " )
print( acuracia)

# acuracia de base para comparar
# vamos usar os estimadores bobos (dummy) para isso

from sklearn.dummy import DummyClassifier

dummy = DummyClassifier()
dummy.fit(treinox,treinoy)
previsoes = dummy.predict(testex)
acuracia = accuracy_score(testey,previsoes)
print("acuracia de base: ")
print(acuracia)

#agora vamos usar áárvores de decisoõões para classificar
#esses algoritmos de decisao retornam como foi decidido as escolhas

from sklearn.tree import DecisionTreeClassifier
#ATENÇÃÃO: as áárvores de decisãão nãão nessecitm de escaladores para funcionarem bem
modelo = DecisionTreeClassifier()
modelo.fit(treinox,treinoy)
previsoes = modelo.predict(testex)

acuracia = accuracy_score(testey,previsoes)
print("acuracia com arvore de decisao: " )
print( acuracia)

# para vizualizar graficamente a arvore de decisoes

from sklearn.tree import export_graphviz
import graphviz
features = x.columns
dot_data = export_graphviz(modelo, feature_names=features,filled=True, rounded=True, class_names=["nãão", "sim"]) # devolve o grafico em uma formataçao estranha


grafico = graphviz.Source(dot_data)
grafico